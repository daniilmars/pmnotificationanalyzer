name: Deploy to SAP BTP Cloud Foundry

on:
  push:
    branches:
      - main # Trigger on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest # Use a fresh Ubuntu environment for each job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checkout the latest code from the repository

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Install Node.js, required for mbt
        with:
          node-version: '18' # Use a stable LTS version of Node.js

      - name: Install Cloud Foundry CLI
        run: |
          # Download the Cloud Foundry CLI binary
          wget -q -O cf-cli-installer.deb "https://packages.cloudfoundry.org/stable?release=debian64&version=8.7.6&source=github"
          # Install the CLI
          sudo dpkg -i cf-cli-installer.deb
          # Verify installation
          cf version

      - name: Install Cloud Foundry MultiApps Plugin
        run: |
          # Install the MultiApps plugin from the CF Community repository
          cf install-plugin -r CF-Community "multiapps" -f
          # Verify plugin installation
          cf plugins

      - name: Install MTA Build Tool (MBT)
        run: npm install -g mbt@1.2.0

      # --- Cloud Foundry Deployment Steps ---
      - name: Login to Cloud Foundry
        run: |
          echo "Attempting CF login with API endpoint: $CF_API_ENDPOINT"
          cf api $CF_API_ENDPOINT
          cf auth "$CF_USERNAME" "$CF_PASSWORD"
          cf target -o "$CF_ORG" -s "$CF_SPACE"
        env:
          CF_USERNAME: ${{ secrets.CF_USERNAME }}
          CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
          CF_ORG: ${{ secrets.CF_ORG }}
          CF_SPACE: ${{ secrets.CF_SPACE }}
          CF_API_ENDPOINT: ${{ secrets.CF_API_ENDPOINT }} # Corrected secret name

      - name: Delete Existing Backend Application (if any)
        run: cf delete -f pm-analyzer-backend || true # Delete if exists, '|| true' prevents step from failing if app doesn't exist

      - name: Push Backend Application
        id: push_backend # Add an ID to this step to capture outputs
        env:
          CF_API_ENDPOINT_FULL: ${{ secrets.CF_API_ENDPOINT }}
        run: |
          REGION=$(echo "$CF_API_ENDPOINT_FULL" | sed -E 's/https:\/\/api\.cf\.([a-zA-Z0-9-]+)\.hana\.ondemand\.com.*/\1/')
          if [ -z "$REGION" ]; then
            echo "Error: Could not extract region from CF_API_ENDPOINT. Please check its format."
            exit 1
          fi
          RUN_ID_SHORT="${GITHUB_RUN_ID: -5}"
          BACKEND_HOSTNAME="pmb-${RUN_ID_SHORT}-${{ secrets.CF_ORG_SHORT_NAME }}-${{ secrets.CF_SPACE_SHORT_NAME }}"
          BACKEND_DOMAIN="cfapps.${REGION}.hana.ondemand.com"

          echo "Generated Backend Hostname: ${BACKEND_HOSTNAME}"
          echo "Generated Backend Domain: ${BACKEND_DOMAIN}"

          echo "backend_hostname=${BACKEND_HOSTNAME}" >> "$GITHUB_OUTPUT"
          echo "backend_domain=${BACKEND_DOMAIN}" >> "$GITHUB_OUTPUT"

          cd backend
          cf push pm-analyzer-backend -f manifest.yml --no-route --no-start
        working-directory: .

      - name: Create and Map Backend Route
        run: |
          BACKEND_HOSTNAME="${{ steps.push_backend.outputs.backend_hostname }}"
          BACKEND_DOMAIN="${{ steps.push_backend.outputs.backend_domain }}"
          BACKEND_ROUTE="${BACKEND_HOSTNAME}.${BACKEND_DOMAIN}"

          echo "Creating route: ${BACKEND_ROUTE}"
          cf create-route "${BACKEND_DOMAIN}" -n "${BACKEND_HOSTNAME}"
          cf map-route pm-analyzer-backend "${BACKEND_DOMAIN}" -n "${BACKEND_HOSTNAME}"

          echo "Mapped Backend Route: ${BACKEND_ROUTE}"
        working-directory: .

      - name: Start Backend Application
        run: |
          cf start pm-analyzer-backend
        working-directory: .

      - name: Create HTML5 Repo Credentials UPS
        run: |
          # Get the HTML5 App Repo service key output in plain text
          # We expect output like:
          # Getting service key html5-repo-key for service instance pm-analyzer-html5-repo-host as ...
          # {
          #  "clientid": "...",
          #  "clientsecret": "...",
          #  "uri": "...",
          #  "uaa": {
          #    "clientid": "...",
          #    "clientsecret": "...",
          #    "url": "...",
          #    "certurl": "...",
          #    "identityzone": "...",
          #    "sburl": "..."
          #  }
          # }
          SERVICE_KEY_OUTPUT=$(cf service-key pm-analyzer-html5-repo-host html5-repo-key | tail -n +2) # Skip header line

          # Extract credentials manually using sed for robustness
          CLIENT_ID=$(echo "$SERVICE_KEY_OUTPUT" | sed -n 's/.*"clientid": "\(.*\)".*/\1/p')
          CLIENT_SECRET=$(echo "$SERVICE_KEY_OUTPUT" | sed -n 's/.*"clientsecret": "\(.*\)".*/\1/p')
          URI=$(echo "$SERVICE_KEY_OUTPUT" | sed -n 's/.*"uri": "\(.*\)".*/\1/p')
          UAA_URL=$(echo "$SERVICE_KEY_OUTPUT" | sed -n 's/.*"url": "\(.*\)".*/\1/p')
          UAA_CLIENTID=$(echo "$SERVICE_KEY_OUTPUT" | sed -n 's/.*"uaa.clientid": "\(.*\)".*/\1/p')
          UAA_CLIENTSECRET=$(echo "$SERVICE_KEY_OUTPUT" | sed -n 's/.*"uaa.clientsecret": "\(.*\)".*/\1/p')
          UAA_CERTURL=$(echo "$SERVICE_KEY_OUTPUT" | sed -n 's/.*"certurl": "\(.*\)".*/\1/p')
          UAA_IDENTITYZONE=$(echo "$SERVICE_KEY_OUTPUT" | sed -n 's/.*"identityzone": "\(.*\)".*/\1/p')
          UAA_SBURL=$(echo "$SERVICE_KEY_OUTPUT" | sed -n 's/.*"sburl": "\(.*\)".*/\1/p')


          # Construct the JSON payload for the User-Provided Service
          # Ensure all extracted values are correctly quoted and escaped for JSON
          CREDENTIALS_JSON="{ \\\"clientid\\\": \\\"${CLIENT_ID}\\\", \\\"clientsecret\\\": \\\"${CLIENT_SECRET}\\\", \\\"uri\\\": \\\"${URI}\\\", \\\"uaa\\\": { \\\"clientid\\\": \\\"${UAA_CLIENTID}\\\", \\\"clientsecret\\\": \\\"${UAA_CLIENTSECRET}\\\", \\\"certurl\\\": \\\"${UAA_CERTURL}\\\", \\\"identityzone\\\": \\\"${UAA_IDENTITYZONE}\\\", \\\"sburl\\\": \\\"${UAA_SBURL}\\\", \\\"url\\\": \\\"${UAA_URL}\\\" }, \\\"grant_type\\\": \\\"client_credentials\\\" }"

          echo "Attempting to create UPS with JSON: $CREDENTIALS_JSON"
          cf create-user-provided-service pm-analyzer-html5-repo-credentials -p "$CREDENTIALS_JSON"
        working-directory: .

      - name: Bind HTML5 Repo Credentials UPS to App Router
        run: cf bind-service pm-analyzer-approuter pm-analyzer-html5-repo-credentials
        working-directory: .

      - name: Build MTA Archive
        run: |
          mkdir -p mta_archives
          mbt build -p=cf --mtar mta_archives/com.sap.pm.pmanalyzer_1.0.0.mtar
          mv mta_archives/mta_archives/com.sap.pm.pmanalyzer_1.0.0.mtar mta_archives/
        working-directory: .

      - name: List MTAR files for debugging
        run: |
          echo "--- Listing contents of mta_archives/ ---"
          ls -l mta_archives/
          echo "--- End of mta_archives/ listing ---"
        working-directory: .

      - name: Deploy MTA Archive
        run: cf deploy mta_archives/com.sap.pm.pmanalyzer_1.0.0.mtar -f --retries 1
