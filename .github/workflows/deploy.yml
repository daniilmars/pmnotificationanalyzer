name: Deploy to SAP BTP Cloud Foundry

on:
  push:
    branches:
      - main # Trigger on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest # Use a fresh Ubuntu environment for each job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checkout the latest code from the repository

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Install Node.js, required for mbt
        with:
          node-version: '18' # Use a stable LTS version of Node.js

      - name: Install Cloud Foundry CLI
        run: |
          # Download the Cloud Foundry CLI binary
          wget -q -O cf-cli-installer.deb "https://packages.cloudfoundry.org/stable?release=debian64&version=8.7.6&source=github"
          # Install the CLI
          sudo dpkg -i cf-cli-installer.deb
          # Verify installation
          cf version

      - name: Install Cloud Foundry MultiApps Plugin
        run: |
          # Install the MultiApps plugin from the CF Community repository
          cf install-plugin -r CF-Community "multiapps" -f
          # Verify plugin installation
          cf plugins

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq # Install jq for JSON parsing

      - name: Install MTA Build Tool (MBT)
        run: npm install -g mbt@1.2.0

      # --- Cloud Foundry Deployment Steps ---
      - name: Login to Cloud Foundry
        run: |
          echo "Attempting CF login with API endpoint: $CF_API_ENDPOINT"
          cf api $CF_API_ENDPOINT
          cf auth "$CF_USERNAME" "$CF_PASSWORD"
          cf target -o "$CF_ORG" -s "$CF_SPACE"
        env:
          CF_USERNAME: ${{ secrets.CF_USERNAME }}
          CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
          CF_ORG: ${{ secrets.CF_ORG }}
          CF_SPACE: ${{ secrets.CF_SPACE }}
          CF_API_ENDPOINT: ${{ secrets.CF_API_ENDPOINT }}

      - name: Delete Existing Backend Application (if any)
        run: cf delete -f pm-analyzer-backend || true # Delete if exists, '|| true' prevents step from failing if app doesn't exist

      - name: Push Backend Application
        # Removed dynamic route generation. Route is now defined in manifest.yml
        run: |
          cd backend
          cf push pm-analyzer-backend -f manifest.yml --no-start # Push with route from manifest
        working-directory: . # Run from root to ensure 'backend' directory is found

      # Removed: Create and Map Backend Route step. cf push handles it.
      # - name: Create and Map Backend Route
      #   run: |
      #     BACKEND_HOSTNAME="${{ steps.push_backend.outputs.backend_hostname }}"
      #     BACKEND_DOMAIN="${{ steps.push_backend.outputs.backend_domain }}"
      #     BACKEND_ROUTE="${BACKEND_HOSTNAME}.${BACKEND_DOMAIN}"
      #     echo "Attempting to delete existing route (if any) to manage quota: ${BACKEND_ROUTE}"
      #     cf delete-route "${BACKEND_DOMAIN}" -n "${BACKEND_HOSTNAME}" -f || true
      #     echo "Creating route: ${BACKEND_DOMAIN}" -n "${BACKEND_HOSTNAME}"
      #     cf create-route "${BACKEND_DOMAIN}" -n "${BACKEND_HOSTNAME}"
      #     cf map-route pm-analyzer-backend "${BACKEND_DOMAIN}" -n "${BACKEND_HOSTNAME}"
      #     echo "Mapped Backend Route: ${BACKEND_ROUTE}"
      #   working-directory: .

      - name: Start Backend Application
        run: |
          # Start the backend application after push
          cf start pm-analyzer-backend
        working-directory: .

      - name: Build MTA Archive
        run: |
          mkdir -p mta_archives
          mbt build -p=cf --mtar mta_archives/com.sap.pm.pmanalyzer_1.0.0.mtar
        working-directory: .

      - name: List MTAR files for debugging
        run: |
          echo "--- Listing contents of mta_archives/ ---"
          ls -l mta_archives/
          echo "--- End of mta_archives/ listing ---"
        working-directory: .

      - name: Deploy MTA Archive
        run: cf deploy mta_archives/com.sap.pm.pmanalyzer_1.0.0.mtar -f --retries 1
