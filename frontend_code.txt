{
    "sap.app": {
        "id": "com.sap.pm.pmanalyzerfiori",
        "type": "application",
        "applicationVersion": {
            "version": "0.0.1"
        },
        "title": "{{appTitle}}",
        "description": "{{appDescription}}"
    },
    "sap.ui": {
        "technology": "UI5",
        "deviceTypes": {
            "desktop": true,
            "tablet": true,
            "phone": true
        }
    },
    "sap.ui5": {
        "dependencies": {
            "minUI5Version": "1.138.0",
            "libs": {
                "sap.m": {},
                "sap.ui.core": {},
                "sap.ui.layout": {}
            }
        },
        "contentDensities": {
            "compact": true,
            "cozy": true
        },
        "models": {
            "i18n": {
                "type": "sap.ui.model.resource.ResourceModel",
                "settings": {
                    "bundleUrl": "i18n/i18n.properties",
                    "supportedLocales": ["en", "de"],
                    "fallbackLocale": "en"
                }
            }
        },
        "rootView": {
            "viewName": "com.sap.pm.pmanalyzerfiori.view.App",
            "type": "XML",
            "async": true,
            "id": "App"
        },
        "routing": {
            "config": {
                "routerClass": "sap.m.routing.Router",
                "viewType": "XML",
                "async": true,
                "viewPath": "com.sap.pm.pmanalyzerfiori.view",
                "controlAggregation": "pages",
                "controlId": "app",
                "clearControlAggregation": false
            },
            "routes": [
                {
                    "name": "worklist",
                    "pattern": "",
                    "target": ["worklist"]
                },
                {
                    "name": "object",
                    "pattern": "Notifications/{notificationId}",
                    "target": ["object"]
                }
            ],
            "targets": {
                "worklist": {
                    "viewName": "Worklist",
                    "viewId": "worklist"
                },
                "object": {
                    "viewName": "Object",
                    "viewId": "object"
                }
            }
        }
    }
}sap.ui.define([
    "sap/ui/core/UIComponent",
    "sap/ui/Device",
    "sap/ui/dom/includeScript", // Correct module for loading external scripts
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageBox"
],
function (UIComponent, Device, includeScript, JSONModel, MessageBox) {
    "use strict";

    return UIComponent.extend("com.sap.pm.pmanalyzerfiori.Component", {
        metadata: {
            manifest: "json"
        },

        init: function () {
            // Create a model for the application's UI state and user profile
            const oUiModel = new JSONModel({
                isAuthenticated: false,
                userProfile: null,
                isBusy: true // Start in a busy state until auth is checked
            });
            this.setModel(oUiModel, "ui");
 
            const oConfigModel = new JSONModel();
            this.setModel(oConfigModel, "config");

            // Set the main data model with mock data
            const oDataModel = new JSONModel();
            this.setModel(oDataModel); // Set model immediately
            oDataModel.loadData(sap.ui.require.toUrl("com/sap/pm/pmanalyzerfiori/mock_data.json"))
                .then((oData) => {
                    oDataModel.setProperty("/Notifications", oDataModel.getData());
                });
 
            // call the base component's init function AFTER setting up the models
            UIComponent.prototype.init.apply(this, arguments);

            // enable routing
            this.getRouter().initialize();

            // Load config and then initialize Auth0. We wrap this in a promise
            // that the Component will hold.
            this._auth0Promise = oConfigModel.loadData(sap.ui.require.toUrl("com/sap/pm/pmanalyzerfiori/config.json"))
                .then(() => {
                    return new Promise((resolve, reject) => {
                        includeScript({
                            url: "https://unpkg.com/@auth0/auth0-spa-js@2.1.3/dist/auth0-spa-js.production.js"
                        })
                        .then(() => this._initAuth0Client())
                        .then(resolve)
                        .catch(reject);
                    });
                });
        },
        
        getAuth0Client: function() {
            return this._auth0Promise;
        },

        _initAuth0Client: async function () {
            const oUiModel = this.getModel("ui");
            try {
                const oConfig = this.getModel("config").getData().auth0;

                // eslint-disable-next-line no-undef
                const auth0Client = await auth0.createAuth0Client({
                    domain: oConfig.domain,
                    clientId: oConfig.clientId,
                    authorizationParams: {
                        audience: oConfig.audience,
                        redirect_uri: window.location.origin + window.location.pathname
                    }
                });

                const query = window.location.search;
                if (query.includes("code=") && query.includes("state=")) {
                    try {
                        await auth0Client.handleRedirectCallback();
                    } catch(e) {
                        console.error("Error during handleRedirectCallback", e);
                        MessageBox.error("An error occurred during the login process. Please try logging in again.", {
                            title: "Authentication Error"
                        });
                    }
                    window.history.replaceState({}, document.title, window.location.pathname);
                }
                
                // Update the UI model with the authentication state and user profile
                const isAuthenticated = await auth0Client.isAuthenticated();
                oUiModel.setProperty("/isAuthenticated", isAuthenticated);
                if (isAuthenticated) {
                    const userProfile = await auth0Client.getUser();
                    oUiModel.setProperty("/userProfile", userProfile);
                }

                return auth0Client;
            } catch (err) {
                console.error("A critical error occurred during authentication setup.", err);
                MessageBox.error("Could not initialize the application due to an authentication error.");
                throw err; // Re-throw to reject the main promise
            } finally {
                // This block guarantees the busy indicator is always removed.
                oUiModel.setProperty("/isBusy", false);
            }
        }
    });
});sap.ui.define([
    "sap/ui/core/mvc/Controller"
],
function (Controller) {
    "use strict";

    return Controller.extend("com.sap.pm.pmanalyzerfiori.controller.App", {
        onInit: function () {
            // Initialization logic for the App view can go here if needed.
        }
    });
});sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/core/UIComponent"
], function (Controller, UIComponent) {
    "use strict";

    return Controller.extend("com.sap.pm.pmanalyzerfiori.controller.BaseController", {

        getRouter: function () {
            return UIComponent.getRouterFor(this);
        }

    });
});sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageBox",
    "sap/ui/core/routing/History"
], function (Controller, JSONModel, MessageBox, History) {
    "use strict";
 
    return Controller.extend("com.sap.pm.pmanalyzerfiori.controller.Object", {
        onInit: function () {
            const oAnalysisModel = new JSONModel({
                busy: false,
                resultsVisible: false,
                score: 0,
                problems: [],
                summary: ""
            });
            this.getView().setModel(oAnalysisModel, "analysis");

            const oRouter = this.getOwnerComponent().getRouter();
            oRouter.getRoute("object").attachPatternMatched(this._onObjectMatched, this);
        },

        _onObjectMatched: function (oEvent) {
            const sNotificationId = oEvent.getParameter("arguments").notificationId;
            const oModel = this.getOwnerComponent().getModel();
            
            // Wait for the model to be loaded before trying to find the path
            oModel.dataLoaded().then(() => {
                const aNotifications = oModel.getProperty("/Notifications") || [];
                const sObjectPath = aNotifications.findIndex(
                    (notif) => notif.NotificationId === sNotificationId
                );
                if (sObjectPath !== -1) {
                    this.getView().bindElement({ path: `/Notifications/${sObjectPath}` });
                }
            }); 
        },

        onNavBack: function () {
            const oHistory = History.getInstance();
            const sPreviousHash = oHistory.getPreviousHash();

            if (sPreviousHash !== undefined) {
                window.history.go(-1);
            } else {
                const oRouter = this.getOwnerComponent().getRouter();
                oRouter.navTo("worklist", {}, true);
            }
        },
 
        onAnalyzePress: async function () {
            const oComponent = this.getOwnerComponent();
            const oView = this.getView();
            const oAnalysisModel = oView.getModel("analysis");
            
            // Combine long text and activities for analysis
            const sLongText = oView.byId("longText").getValue();
            const sActivities = oView.byId("activitiesText").getValue();
            const sTextToAnalyze = `${sLongText}\n\n${sActivities}`;
 
            if (!sTextToAnalyze.trim()) {
                MessageBox.warning("Please enter text to analyze.");
                return;
            }
            
            this._setAnalysisState(true);
 
            try {
                const auth0Client = await oComponent.getAuth0Client();
                const response = await this._callAnalysisApi(sTextToAnalyze, auth0Client);
                const result = await response.json();
                this._displayAnalysisResult(result);
 
            } catch (error) {
                if (error.error === 'login_required' || error.error === 'consent_required') {
                    const auth0Client = await oComponent.getAuth0Client();
                    await auth0Client.loginWithRedirect();
                    return;
                }
                MessageBox.error(error.message);
            } finally {
                this._setAnalysisState(false);
            }
        },

        _callAnalysisApi: async function(sText, auth0Client) {
            const accessToken = await auth0Client.getTokenSilently();
 
            const response = await fetch("/api/analyze", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${accessToken}`
                },
                body: JSON.stringify({ text: sText })
            });

            if (!response.ok) {
                let errorMessage = `Server error: ${response.status} ${response.statusText}`;
                try {
                    const errorData = await response.json();
                    if (errorData.error && errorData.error.message) {
                        errorMessage = errorData.error.message;
                    }
                } catch (e) {
                    console.error("Could not parse error response as JSON.", e);
                }
                throw new Error(errorMessage);
            }
            return response;
        },

        _setAnalysisState: function(bIsBusy) {
            const oAnalysisModel = this.getView().getModel("analysis");
            oAnalysisModel.setProperty("/busy", bIsBusy);
            // Hide old results when a new analysis starts
            if (bIsBusy) {
                oAnalysisModel.setProperty("/resultsVisible", false);
            }
        },

        _displayAnalysisResult: function(oResult) {
            const oAnalysisModel = this.getView().getModel("analysis");
            oAnalysisModel.setProperty("/score", oResult.score);
            oAnalysisModel.setProperty("/problems", oResult.problems);
            oAnalysisModel.setProperty("/summary", oResult.summary);
            oAnalysisModel.setProperty("/resultsVisible", true);
            this._updateScoreIndicator(oResult.score);
        },

        _updateScoreIndicator: function(score) {
            const oScoreIndicator = this.getView().byId("scoreIndicator");
            if (score >= 90) {
                oScoreIndicator.setState(sap.ui.core.ValueState.Success);
            } else if (score >= 70) {
                oScoreIndicator.setState(sap.ui.core.ValueState.Warning);
            } else {
                oScoreIndicator.setState(sap.ui.core.ValueState.Error);
            }
        }
    });
});sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageBox"
], function (Controller, JSONModel, MessageBox) {
    "use strict";
 
    return Controller.extend("com.sap.pm.pmanalyzerfiori.controller.View1", {
        onInit: function () {
            // Model for analysis results
            const oAnalysisModel = new JSONModel({
                busy: false,
                resultsVisible: false,
                score: 0,
                problems: [],
                summary: ""
            });
            this.getView().setModel(oAnalysisModel, "analysis");
            
            // The main UI model (with auth state) is now managed globally by Component.js
            // and is available automatically in this view.
        },
 
        onLogin: async function () {
            const oComponent = this.getOwnerComponent();
            const auth0Client = await oComponent.getAuth0Client();
            await auth0Client.loginWithRedirect();
        },
 
        onLogout: async function () {
            const oComponent = this.getOwnerComponent();
            const auth0Client = await oComponent.getAuth0Client();
            auth0Client.logout({
                logoutParams: {
                    returnTo: window.location.origin + window.location.pathname
                }
            });
        },
 
        onAnalyzePress: async function () {
            const oComponent = this.getOwnerComponent();
            const oView = this.getView();
            const oAnalysisModel = oView.getModel("analysis");
            const sTextToAnalyze = oView.byId("pmTextInput").getValue();
 
            if (!sTextToAnalyze.trim()) {
                MessageBox.warning("Please enter text to analyze.");
                return;
            }
 
            oAnalysisModel.setProperty("/busy", true);
            oAnalysisModel.setProperty("/resultsVisible", false);
 
            try {
                const auth0Client = await oComponent.getAuth0Client();
                const response = await this._callAnalysisApi(sTextToAnalyze, auth0Client);
 
                const { score, problems, summary } = await response.json();
                oAnalysisModel.setProperty("/score", score);
                oAnalysisModel.setProperty("/problems", problems);
                oAnalysisModel.setProperty("/summary", summary);
                oAnalysisModel.setProperty("/resultsVisible", true);

                this._updateScoreIndicator(score);
 
            } catch (error) {
                if (error.error === 'login_required' || error.error === 'consent_required') {
                    // If login is required, redirect the user and stop further execution.
                    const auth0Client = await oComponent.getAuth0Client();
                    await auth0Client.loginWithRedirect();
                    return;
                }
                // For all other types of errors, display a message to the user.
                MessageBox.error(error.message);
            } finally {
                oAnalysisModel.setProperty("/busy", false);
            }
        },

        /**
         * Calls the backend API to analyze the text.
         * @param {string} sText The text to analyze.
         * @param {object} auth0Client The initialized Auth0 client instance.
         * @returns {Promise<Response>} A promise that resolves with the fetch response.
         * @private
         */
        _callAnalysisApi: async function(sText, auth0Client) {
            const accessToken = await auth0Client.getTokenSilently();
 
            const response = await fetch("/api/analyze", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${accessToken}`
                },
                body: JSON.stringify({ text: sText })
            });

            if (!response.ok) {
                let errorMessage = `Server error: ${response.status} ${response.statusText}`;
                try {
                    // Try to parse a structured error from the backend
                    const errorData = await response.json();
                    if (errorData.error && errorData.error.message) {
                        errorMessage = errorData.error.message;
                    }
                } catch (e) {
                    // This catch block handles the "Unexpected end of JSON input" error
                    // if the response body is empty or not valid JSON.
                    // We will proceed with the generic server error message.
                    console.error("Could not parse error response as JSON.", e);
                }
                throw new Error(errorMessage);
            }
            return response;
        },

        /**
         * Helper function to color the score indicator based on the value.
         * @param {int} score The quality score received from the backend.
         */
        _updateScoreIndicator: function(score) {
            const oScoreIndicator = this.getView().byId("scoreIndicator");
            // The percentValue and displayValue are already bound to the model.
            // We only need to set the color state.
            if (score >= 90) {
                oScoreIndicator.setState(sap.ui.core.ValueState.Success); // Green
            } else if (score >= 70) {
                oScoreIndicator.setState(sap.ui.core.ValueState.Warning); // Yellow
            } else {
                oScoreIndicator.setState(sap.ui.core.ValueState.Error); // Red
            }
        }
    });
});sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel"
], function (Controller, JSONModel) {
    "use strict";
    return Controller.extend("com.sap.pm.pmanalyzerfiori.controller.Worklist", {
        onInit: function () {
            // The main data model is now set globally in Component.js
        },

        onPress: function (oEvent) {
            const oItem = oEvent.getSource();
            const oRouter = this.getOwnerComponent().getRouter();
            oRouter.navTo("object", {
                notificationId: oItem.getBindingContext().getProperty("NotificationId")
            });
        },

        onLogin: async function () {
            const oComponent = this.getOwnerComponent();
            const auth0Client = await oComponent.getAuth0Client();
            await auth0Client.loginWithRedirect();
        },
 
        onLogout: async function () {
            const oComponent = this.getOwnerComponent();
            const auth0Client = await oComponent.getAuth0Client();
            auth0Client.logout({
                logoutParams: {
                    returnTo: window.location.origin + window.location.pathname
                }
            });
        }
    });
});<mvc:View
    controllerName="com.sap.pm.pmanalyzerfiori.controller.App"
    xmlns:mvc="sap.ui.core.mvc"
    xmlns="sap.m"
    displayBlock="true">
    <App id="app" />
</mvc:View><mvc:View
    controllerName="com.sap.pm.pmanalyzerfiori.controller.Object"
    xmlns="sap.m"
    xmlns:mvc="sap.ui.core.mvc"
    xmlns:f="sap.ui.layout.form"
    xmlns:core="sap.ui.core">
    <Page
        id="page"
        title="{parts: ['i18n>objectPageTitle', 'NotificationId'], formatter: 'jQuery.sap.formatMessage'}"
        showNavButton="true"
        navButtonPress=".onNavBack">
        <content>
            <VBox class="sapUiSmallMargin">
                <!-- Formular für Meldungsdetails -->
                <f:SimpleForm
                    id="SimpleFormDisplay"
                    editable="false"
                    layout="ResponsiveGridLayout"
                    labelSpanXL="3" labelSpanL="3" labelSpanM="3" labelSpanS="12"
                    adjustLabelSpan="false"
                    emptySpanXL="4" emptySpanL="4" emptySpanM="4" emptySpanS="0"
                    columnsXL="1" columnsL="1" columnsM="1"
                    singleContainerFullSize="false">
                    <f:content>
                        <Label text="{i18n>object.descriptionLabel}"/>
                        <Text id="descriptionText" text="{Description}" />
                        <Label text="{i18n>object.typeLabel}"/>
                        <Text id="typeText" text="{NotificationType}" />
                        <Label text="{i18n>object.userLabel}"/>
                        <Text id="userText" text="{CreatedByUser}" />
                        <Label text="{i18n>object.longTextLabel}"/>
                        <TextArea id="longText" value="{LongText}" growing="true" width="100%" editable="false"/>
                        <Label text="{i18n>object.activitiesLabel}"/>
                        <TextArea id="activitiesText" value="{Activities}" growing="true" width="100%" editable="false"/>
                    </f:content>
                </f:SimpleForm>

                <!-- Analyse Button -->
                <Button
                    id="analyzeButton"
                    text="{i18n>object.analyzeButtonText}"
                    type="Emphasized"
                    press=".onAnalyzePress"
                    class="sapUiSmallMarginTop"
                    icon="sap-icon://activate" />

                <!-- Ergebnisbereich (zuerst unsichtbar) -->
                <Panel id="resultsPanel" visible="{analysis>/resultsVisible}" class="sapUiSmallMarginTop" expandable="true" expanded="true" width="auto" busy="{analysis>/busy}">
                    <headerToolbar>
                        <Toolbar>
                            <Title text="{i18n>object.resultsPanelTitle}"/>
                        </Toolbar>
                    </headerToolbar>
                    <content>
                        <f:SimpleForm layout="ResponsiveGridLayout">
                            <f:content>
                                <Label text="{i18n>object.scoreLabel}"/>
                                <ProgressIndicator
                                    id="scoreIndicator"
                                    percentValue="{analysis>/score}"
                                    displayValue="{analysis>/score}/100"
                                    showValue="true"
                                    state="None" />

                                <Label text="{i18n>object.problemsLabel}"/>
                                <List
                                    id="problemsList"
                                    items="{analysis>/problems}"
                                    noDataText="{i18n>noProblemsFound}">
                                    <StandardListItem title="{analysis>}" type="Inactive" />
                                </List>

                                <Label text="{i18n>object.summaryLabel}"/>
                                <Text id="summaryText" text="{analysis>/summary}" />
                            </f:content>
                        </f:SimpleForm>
                    </content>
                </Panel>

            </VBox>
        </content>
    </Page>
</mvc:View><mvc:View
    controllerName="com.sap.pm.pmanalyzerfiori.controller.View1"
    xmlns:mvc="sap.ui.core.mvc"
    xmlns="sap.m"
    xmlns:l="sap.ui.layout"
    displayBlock="true">
    <Page id="page" title="{i18n>title}" busy="{ui>/isBusy}">
        <headerContent>
            <!-- Login button, visible only when not authenticated -->
            <Button
                id="loginButton"
                text="{i18n>loginButtonText}"
                press="onLogin"
                visible="{= !${ui>/isAuthenticated} }" />

            <!-- User information and Logout button, visible only when authenticated -->
            <HBox visible="{ui>/isAuthenticated}" alignItems="Center">
                <Text text="{ui>/userProfile/name}" class="sapUiSmallMarginEnd" />
                <Button
                    id="logoutButton"
                    text="{i18n>logoutButtonText}"
                    press="onLogout" />
            </HBox>
        </headerContent>
        <content>
            <!-- The main content of the application is only visible after successful login -->
            <VBox class="sapUiSmallMargin" visible="{ui>/isAuthenticated}">
                <Label text="{i18n>view1.inputLabel}" labelFor="pmTextInput" />
                <TextArea
                    id="pmTextInput"
                    width="100%"
                    rows="8"
                    placeholder="{i18n>view1.inputPlaceholder}" />
                <Button
                    id="analyzeButton"
                    text="{i18n>view1.analyzeButton}"
                    press="onAnalyzePress"
                    type="Emphasized"
                    class="sapUiSmallMarginTop" />

                <Panel
                    id="resultsPanel"
                    headerText="{i18n>view1.resultsPanelHeader}"
                    class="sapUiSmallMarginTop"
                    visible="{analysis>/resultsVisible}"
                    busy="{analysis>/busy}">
                    <l:Grid defaultSpan="L6 M6 S12">
                        <Label text="{i18n>view1.scoreLabel}" labelFor="scoreIndicator" />
                        <ProgressIndicator
                            id="scoreIndicator"
                            percentValue="{analysis>/score}"
                            displayValue="{analysis>/score}/100"
                            showValue="true"
                            state="None"/>
                        <Label text="{i18n>view1.problemsLabel}"/>
                        <List items="{analysis>/problems}" noDataText="{i18n>noProblemsFound}">
                            <StandardListItem title="{analysis>}" type="Inactive"/>
                        </List>
                        <Label text="{i18n>view1.summaryLabel}" />
                        <Text text="{analysis>/summary}" />
                    </l:Grid>
                </Panel>
            </VBox>
        </content>
    </Page>
</mvc:View><mvc:View
    controllerName="com.sap.pm.pmanalyzerfiori.controller.Worklist"
    xmlns="sap.m"
    xmlns:mvc="sap.ui.core.mvc">
    <Page id="worklistPage" title="{i18n>worklistTitle}" busy="{ui>/isBusy}">
        <headerContent>
            <!-- Login button, visible only when not authenticated -->
            <Button
                id="loginButton"
                text="{i18n>loginButtonText}"
                press="onLogin"
                visible="{= !${ui>/isAuthenticated} }" />

            <!-- User information and Logout button, visible only when authenticated -->
            <HBox visible="{ui>/isAuthenticated}" alignItems="Center">
                <Text text="{ui>/userProfile/name}" class="sapUiSmallMarginEnd" />
                <Button
                    id="logoutButton"
                    text="{i18n>logoutButtonText}"
                    press="onLogout" />
            </HBox>
        </headerContent>
        <content>
            <List id="list" items="{/Notifications}" headerText="Notifications">
                <StandardListItem title="{NotificationId}" type="Navigation" press=".onPress"/>
            </List>
        </content>
    </Page>
</mvc:View>{
  "name": "pm-analyzer-fiori",
  "version": "0.0.1",
  "description": "An SAP Fiori application.",
  "keywords": [
    "ui5",
    "openui5",
    "sapui5"
  ],
  "main": "webapp/index.html",
  "dependencies": {
    "@auth0/auth0-spa-js": "^2.3.0"
  },
  "devDependencies": {
    "@sap-ux/ui5-middleware-fe-mockserver": "2",
    "@sap/ux-ui5-tooling": "1",
    "@ui5/cli": "^4.0.16",
    "mbt": "^1.2.29",
    "rimraf": "^5.0.5",
    "ui5-task-zipper": "^3.4.x",
    "ui5-middleware-simpleproxy": "^0.7.0"
  },
  "scripts": {
    "start": "fiori run --config ./ui5.yaml --open \"webapp/index.html\"",
    "start-local": "fiori run --config ./ui5-local.yaml --open \"test/flpSandbox.html?sap-ui-xx-viewCache=false#comsappmpmanalyzerfiori-display\"",
    "build": "ui5 build --config=ui5.yaml --clean-dest --dest dist",
    "deploy": "fiori cfDeploy",
    "deploy-config": "fiori add deploy-config",
    "start-noflp": "echo \\\"This application was generated with a local metadata file and does not reference a live server. Please add the required server configuration or start this application with mock data using the target: npm run start-mock\\\"",
    "start-mock": "fiori run --config ./ui5-mock.yaml --open \"test/flpSandbox.html?sap-ui-xx-viewCache=false#comsappmpmanalyzerfiori-display\"",
    "int-test": "fiori run --config ./ui5-mock.yaml --open 'test/integration/opaTests.qunit.html'",
    "start-variants-management": "echo \\\"This application was generated with a local metadata file and does not reference a live server. Please add the required server configuration or start this application with mock data using the target: npm run start-mock\\\"",
    "unit-test": "fiori run --config ./ui5-mock.yaml --open 'test/unit/unitTests.qunit.html'",
    "build:cf": "ui5 build preload --clean-dest --config ui5-deploy.yaml --include-task=generateCachebusterInfo",
    "build:mta": "rimraf resources mta_archives && mbt build",
    "undeploy": "cf undeploy comsappmpmanalyzerfiori --delete-services --delete-service-keys --delete-service-brokers"
  },
  "sapuxLayer": "CUSTOMER_BASE"
}
specVersion: '2.6'
metadata:
  name: pm-analyzer-fiori
type: application
server:
  customMiddleware:
    - name: fiori-tools-appreload
      afterMiddleware: compression
      configuration:
        port: 35729
        path: webapp
        delay: 300
    - name: fiori-tools-proxy
      afterMiddleware: compression
      configuration:
        # This is the configuration for your local Python backend
        backend:
          - path: /api
            url: http://localhost:5001
        ui5:
          path:
            - /resources
            - /test-resources
          url: https://ui5.sap.com_schema-version: "3.2"
ID: comsappmpmanalyzerfiori
description: Generated by Fiori Tools
version: 0.0.1
modules:
- name: comsappmpmanalyzerfiori-app-content
  type: com.sap.application.content
  path: .
  requires:
  - name: comsappmpmanalyzerfiori-app-front
    parameters:
      content-target: true
  - name: comsappmpmanalyzerfiori-uaa
  parameters:
    config:
      destinations:
      - name: ui5
        url: https://ui5.sap.com
  build-parameters:
    build-result: resources
    requires:
    - artifacts:
      - comsappmpmanalyzerfiori.zip
      name: comsappmpmanalyzerfiori
      target-path: resources/
- name: comsappmpmanalyzerfiori
  type: html5
  path: .
  build-parameters:
    build-result: dist
    builder: custom
    commands:
    - npm install
    - npm run build:cf
    supported-platforms: []
resources:
- name: comsappmpmanalyzerfiori-uaa
  type: org.cloudfoundry.managed-service
  parameters:
    path: ./xs-security.json
    service: xsuaa
    service-name: comsappmpmanalyzerfiori-xsuaa-service
    service-plan: application
- name: comsappmpmanalyzerfiori-app-front
  type: org.cloudfoundry.managed-service
  parameters:
    service: app-front
    service-name: comsappmpmanalyzerfiori-app-front-service
    service-plan: developer
parameters:
  deploy_mode: html5-repo
  enable-parallel-deployments: true
